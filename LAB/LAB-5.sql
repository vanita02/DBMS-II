-- Creating PersonInfo Table 
CREATE TABLE PersonInfo ( 
PersonID INT PRIMARY KEY, 
PersonName VARCHAR(100) NOT NULL, 
Salary DECIMAL(8,2) NOT NULL, 
JoiningDate DATETIME NULL, 
City VARCHAR(100) NOT NULL, 
Age INT NULL, 
BirthDate DATETIME NOT NULL 
); 

-- Creating PersonLog Table 
CREATE TABLE PersonLog ( 
PLogID INT PRIMARY KEY IDENTITY(1,1), 
PersonID INT NOT NULL, 
PersonName VARCHAR(250) NOT NULL, 
Operation VARCHAR(50) NOT NULL, 
UpdateDate DATETIME NOT NULL,  
);


			--PART – A 

--1. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table to display 
--a message “Record is Affected.”  

CREATE TRIGGER TR_RECORD_AFFECTED
ON PERSONINFO
AFTER INSERT,UPDATE,DELETE
AS
BEGIN
	PRINT('RECORD IS AFFECTED');
END

INSERT INTO PERSONINFO VALUES(2,'VANITA',80000.00,'2025-1-23','AHMEDABAD',18,'2006-8-18')
DELETE FROM PERSONINFO WHERE PERSONID = 2

SELECT * FROM PERSONINFO

DROP TRIGGER TR_RECORD_AFFECTED

--2. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table. For that, 
--log all operations performed on the person table into PersonLog.


	--INSERT
CREATE TRIGGER TR_PERSON_AFTER_INSERT
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = PERSONNAME FROM INSERTED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
END

INSERT INTO PERSONINFO VALUES(2,'KHUSHI',80000.00,'2025-1-23','AHMEDABAD',18,'2006-8-18')

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_AFTER_INSERT

   --UPDATE

CREATE TRIGGER TR_PERSON_AFTER_UPDATE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = PERSONNAME FROM INSERTED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
END

UPDATE PERSONINFO
SET PersonName = 'DISHA'
WHERE PERSONID = 2

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_AFTER_UPDATE

	--DELETE

CREATE TRIGGER TR_PERSON_AFTER_DELETE
ON PERSONINFO
AFTER DELETE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM DELETED
	SELECT @PERSONNAME = PERSONNAME FROM DELETED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'DELETE',GETDATE())
END

DELETE FROM PERSONINFO WHERE PERSONID = 1

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_AFTER_DELETE

--3. Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo 
--table. For that, log all operations performed on the person table into PersonLog. 

	--INSERT

CREATE TRIGGER TR_INSTEAD_OF_INSERT
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = PERSONNAME FROM INSERTED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
END

INSERT INTO PERSONINFO VALUES(4,'NISHA',80000.00,'2025-1-23','AHMEDABAD',18,'2006-8-18')

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_INSTEAD_OF_INSERT

   --UPDATE

CREATE TRIGGER TR_PERSON_INSTEAD_OF_UPDATE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = PERSONNAME FROM INSERTED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
END

UPDATE PERSONINFO
SET PersonName = 'DISHA'
WHERE PERSONID = 3

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_INSTEAD_OF_UPDATE

	--DELETE

CREATE TRIGGER TR_PERSON_INSTEAD_OF_DELETE
ON PERSONINFO
AFTER DELETE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM DELETED
	SELECT @PERSONNAME = PERSONNAME FROM DELETED

	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'DELETE',GETDATE())
END

DELETE FROM PERSONINFO WHERE PERSONID = 3

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_INSTEAD_OF_DELETE

--4. Create a trigger that fires on INSERT operation on the PersonInfo table to convert person name into 
--uppercase whenever the record is inserted. 

CREATE TRIGGER TR_PERSON_AFTER_INSERT_UPRERCASE_NAME
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50)
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = UPPER(PERSONNAME) FROM INSERTED
	UPDATE PERSONINFO
	SET PERSONNAME = @PERSONNAME
	WHERE PERSONID = @PERSONID
	INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
END

INSERT INTO PERSONINFO VALUES(3,'dharvi',80000.00,'2025-1-23','AHMEDABAD',18,'2006-8-18')

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_PERSON_AFTER_INSERT_UPRERCASE_NAME

--5. Create trigger that prevent duplicate entries of person name on PersonInfo table. 

CREATE TRIGGER TR_INSTEAD_OF_DUPLICATE_NAME
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO PERSONINFO (PERSONID,PERSONNAME,SALARY,JOININGDATE,CITY,AGE,BIRTHDATE)
	SELECT PERSONID,PERSONNAME,SALARY,JOININGDATE,CITY,AGE,BIRTHDATE FROM INSERTED
	WHERE PERSONNAME NOT IN (SELECT PERSONNAME FROM PERSONINFO)
END

INSERT INTO PERSONINFO VALUES(5,'PRIYA',80000.00,'2025-1-23','AHMEDABAD',19,'2006-8-18')

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_INSTEAD_OF_DUPLICATE_NAME

--6. Create trigger that prevent Age below 18 years.

CREATE TRIGGER TR_INSTEAD_OF_INSERT_AGE
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(50),@AGE INT
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @PERSONNAME = PERSONNAME FROM INSERTED
	SELECT @AGE = AGE FROM INSERTED

	IF @AGE>18
		INSERT INTO PERSONLOG VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
	ELSE
		PRINT('AGE IS BELOW 18 !!')
END

INSERT INTO PERSONINFO VALUES(4,'NISHA',80000.00,'2025-1-23','AHMEDABAD',19,'2006-8-18')

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_INSTEAD_OF_INSERT_AGE



			--PART – B
			
--7. Create a trigger that fires on INSERT operation on person table, which calculates the age and update 
--that age in Person table.

CREATE TRIGGER TR_CALCULATE_AGE
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @BIRTH_DATE DATETIME,@AGE INT,@PERSONID INT
	SELECT @BIRTH_DATE = BIRTHDATE FROM INSERTED
	SELECT @PERSONID = PERSONID FROM INSERTED
	SELECT @AGE = DATEDIFF(YEAR,@BIRTH_DATE,GETDATE())
	UPDATE PERSONINFO
	SET AGE = @AGE
	WHERE PERSONID = @PERSONID
END

INSERT INTO PERSONINFO VALUES(6,'NISHA',80000.00,'2025-1-23','AHMEDABAD',56,'2006-8-18')
INSERT INTO PERSONINFO VALUES(8,'VIDHI',80000.00,'2025-1-23','AHMEDABAD',89,'2006-8-18')


SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_CALCULATE_AGE

--8. Create a Trigger to Limit Salary Decrease by a 10%. 

CREATE TRIGGER TR_UPDATE_SALARY
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @NEWSALARY DECIMAL(10,2),@OLDSALARY DECIMAL(10,2),@PERSONID INT
	SELECT @OLDSALARY = SALARY ,@PERSONID = PERSONID FROM DELETED
	SELECT @NEWSALARY = SALARY FROM INSERTED
	
	IF @NEWSALARY < @OLDSALARY*0.9
	BEGIN
		UPDATE PERSONINFO
		SET SALARY = @OLDSALARY
		WHERE @PERSONID = PERSONID
	END
END

	UPDATE PERSONINFO
		SET SALARY = 100
		WHERE PERSONID = 1

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_UPDATE_SALARY


			--PART – C  

--9. Create Trigger to Automatically Update JoiningDate to Current Date on INSERT if JoiningDate is NULL 
--during an INSERT.

CREATE TRIGGER TR_UPDATE_JOININGDATE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @JOININGDATE DATETIME , @PERSONID INT
	SELECT @JOININGDATE = JOININGDATE FROM INSERTED
		UPDATE PERSONINFO
		SET JOININGDATE = GETDATE()
		WHERE JOININGDATE IS NULL
END

	UPDATE PERSONINFO
		SET JOININGDATE = NULL
		WHERE PERSONID = 3

SELECT * FROM PERSONINFO
SELECT * FROM PERSONLOG

DROP TRIGGER TR_UPDATE_JOININGDATE

--10. Create DELETE trigger on PersonLog table, when we delete any record of PersonLog table it prints 
--‘Record deleted successfully from PersonLog’.

CREATE TRIGGER TR_DELETE_PERSONLOG
ON PERSONLOG
AFTER DELETE
AS
BEGIN
	PRINT('Record deleted successfully from PersonLog')
END

DELETE FROM PERSONLOG WHERE PERSONID = 1

SELECT * FROM PERSONLOG
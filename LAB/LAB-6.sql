CREATE TABLE Products ( 
Product_id INT PRIMARY KEY, 
Product_Name VARCHAR(250) NOT NULL, 
Price DECIMAL(10, 2) NOT NULL 
);

INSERT INTO Products (Product_id, Product_Name, Price) VALUES 
(1, 'Smartphone', 35000), 
(2, 'Laptop', 65000), 
(3, 'Headphones', 5500), 
(4, 'Television', 85000), 
(5, 'Gaming Console', 32000);

SELECT * FROM PRODUCTS


			--PART - A 

--1. Create a cursor Product_Cursor to fetch all the rows from a products table.
DECLARE @PID INT,@PNAME VARCHAR(250),@PRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR CURSOR
FOR
	SELECT PRODUCT_ID,PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSOR

FETCH NEXT FROM PRODUCT_CURSOR INTO
@PID,@PNAME,@PRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		PRINT('PRODUCT_ID : '+CAST(@PID AS VARCHAR)+' PRODUCT_NAME : '+CAST(@PNAME AS VARCHAR)+' PRICE : '+CAST(@PRICE AS VARCHAR));
		FETCH NEXT FROM PRODUCT_CURSOR INTO
		@PID,@PNAME,@PRICE
	END

CLOSE PRODUCT_CURSOR

DEALLOCATE PRODUCT_CURSOR

--2. Create a cursor Product_Cursor_Fetch to fetch the records in form of ProductID_ProductName. 
--(Example: 1_Smartphone) 

DECLARE @PRODUCT_ID INT,@PRODUCT_NAME VARCHAR(250);

DECLARE PRODUCT_CURSOR_FETCH CURSOR
FOR
	SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCTS

OPEN PRODUCT_CURSOR_FETCH

FETCH NEXT FROM PRODUCT_CURSOR_FETCH INTO
@PRODUCT_ID,@PRODUCT_NAME

WHILE @@FETCH_STATUS=0
	BEGIN
		PRINT(CAST(@PRODUCT_ID AS VARCHAR)+'_'+CAST(@PRODUCT_NAME AS VARCHAR));
		FETCH NEXT FROM PRODUCT_CURSOR_FETCH INTO
		@PRODUCT_ID,@PRODUCT_NAME
	END

CLOSE PRODUCT_CURSOR_FETCH

DEALLOCATE PRODUCT_CURSOR_FETCH

--3. Create a Cursor to Find and Display Products Above Price 30,000.
DECLARE @PRODUCTNAME VARCHAR(250),@PROCUCTPRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR_PRICE CURSOR
FOR
	SELECT PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSOR_PRICE

FETCH NEXT FROM PRODUCT_CURSOR_PRICE INTO
@PRODUCTNAME,@PROCUCTPRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		IF @PROCUCTPRICE>30000
			PRINT(@PRODUCTNAME);
		FETCH NEXT FROM PRODUCT_CURSOR_PRICE INTO
		@PRODUCTNAME,@PROCUCTPRICE
	END

CLOSE PRODUCT_CURSOR_FETCH

DEALLOCATE PRODUCT_CURSOR_FETCH

--4. Create a cursor Product_CursorDelete that deletes all the data from the Products table. 


			--PART – B 

--5. Create a cursor Product_CursorUpdate that retrieves all the data from the products table and increases 
--the price by 10%.

DECLARE @P_ID INT,@P_NAME VARCHAR(250),@P_PRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR_UPDATE CURSOR
FOR
	SELECT PRODUCT_ID,PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSOR_UPDATE

FETCH NEXT FROM PRODUCT_CURSOR_UPDATE INTO
@P_ID,@P_NAME,@P_PRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		DECLARE @NEW_PRICE DECIMAL(10,2)
		SET @NEW_PRICE = @P_PRICE+(0.1*@P_PRICE)
		PRINT(CAST(@P_ID AS VARCHAR)+' - '+@P_NAME+' - '+CAST(@NEW_PRICE AS VARCHAR));
		FETCH NEXT FROM PRODUCT_CURSOR_UPDATE INTO
		@P_ID,@P_NAME,@P_PRICE
	END

CLOSE PRODUCT_CURSOR_UPDATE

DEALLOCATE PRODUCT_CURSOR_UPDATE

--6. Create a Cursor to Rounds the price of each product to the nearest whole number.

DECLARE @PO_NAME VARCHAR(250),@PO_PRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR_ROUNDOF CURSOR
FOR
	SELECT PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSOR_ROUNDOF

FETCH NEXT FROM PRODUCT_CURSOR_ROUNDOF INTO
@PO_NAME,@PO_PRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		PRINT( CAST(ROUND(@PO_PRICE,0) AS VARCHAR));
		FETCH NEXT FROM PRODUCT_CURSOR_ROUNDOF INTO
		@PO_NAME,@PO_PRICE
	END

CLOSE PRODUCT_CURSOR_ROUNDOF

DEALLOCATE PRODUCT_CURSOR_ROUNDOF

			--PART – C 

--7. Create a cursor to insert details of Products into the NewProducts table if the product is “Laptop” 
--(Note: Create NewProducts table first with same fields as Products table) 

CREATE TABLE NEW_PRODUCTS ( 
Product_id INT PRIMARY KEY, 
Product_Name VARCHAR(250) NOT NULL, 
Price DECIMAL(10, 2) NOT NULL 
);

DECLARE @NEWPID INT,@NEWPNAME VARCHAR(250),@NEWPRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR_NEW_TABLE CURSOR
FOR
	SELECT PRODUCT_ID,PRODUCT_NAME,PRICE FROM PRODUCTS
	WHERE PRODUCT_NAME = 'LAPTOP'

OPEN PRODUCT_CURSOR_NEW_TABLE

FETCH NEXT FROM PRODUCT_CURSOR_NEW_TABLE INTO
@NEWPID,@NEWPNAME,@NEWPRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		INSERT INTO NEW_PRODUCTS(PRODUCT_ID,PRODUCT_NAME,PRICE)
		VALUES(@NEWPID,@NEWPNAME,@NEWPRICE)
		
		FETCH NEXT FROM PRODUCT_CURSOR_NEW_TABLE INTO
		@NEWPID,@NEWPNAME,@NEWPRICE
	END

CLOSE PRODUCT_CURSOR_NEW_TABLE

DEALLOCATE PRODUCT_CURSOR_NEW_TABLE

SELECT * FROM NEW_PRODUCTS

--8. Create a Cursor to Archive High-Price Products in a New Table (ArchivedProducts), Moves products 
--with a price above 50000 to an archive table, removing them from the original Products table.

CREATE TABLE ARCHIVED_PRODUCTS ( 
Product_id INT PRIMARY KEY, 
Product_Name VARCHAR(250) NOT NULL, 
Price DECIMAL(10, 2) NOT NULL 
);

DECLARE @AP_ID INT,@AP_NAME VARCHAR(250),@AP_PRICE DECIMAL(10,2);

DECLARE PRODUCT_CURSOR_NEW_ARCHIVED_TABLE CURSOR
FOR
	SELECT PRODUCT_ID,PRODUCT_NAME,PRICE FROM PRODUCTS

OPEN PRODUCT_CURSOR_NEW_ARCHIVED_TABLE

FETCH NEXT FROM PRODUCT_CURSOR_NEW_ARCHIVED_TABLE INTO
@AP_ID,@AP_NAME,@AP_PRICE

WHILE @@FETCH_STATUS=0
	BEGIN
		IF(@AP_PRICE>50000)
			BEGIN
				INSERT INTO ARCHIVED_PRODUCTS(PRODUCT_ID,PRODUCT_NAME,PRICE)
				VALUES(@AP_ID,@AP_NAME,@AP_PRICE)
				PRINT(@AP_NAME);
				DELETE FROM PRODUCTS
				WHERE PRODUCT_ID=@AP_ID
			END
		FETCH NEXT FROM PRODUCT_CURSOR_NEW_ARCHIVED_TABLE INTO
		@AP_ID,@AP_NAME,@AP_PRICE
	END

CLOSE PRODUCT_CURSOR_NEW_ARCHIVED_TABLE

DEALLOCATE PRODUCT_CURSOR_NEW_ARCHIVED_TABLE

SELECT * FROM ARCHIVED_PRODUCTS

SELECT * FROM PRODUCTS